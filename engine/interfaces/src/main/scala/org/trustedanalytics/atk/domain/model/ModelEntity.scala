/*
// Copyright (c) 2015 Intel Corporation 
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

package org.trustedanalytics.atk.domain.model

import org.trustedanalytics.atk.domain.{ Status, Naming, HasId }
import org.trustedanalytics.atk.engine.plugin.Invocation
import org.joda.time.DateTime
import spray.json.JsObject

/**
 *
 * @param id unique id auto-generated by the database
 * @param name name assigned by user, auto-assigned by system if user doesn't supply
 * @param modelType the type of the model eg: OLS, LogisticRegression
 * @param description description of the model (a good default might say what frame it came from)
 * @param statusId lifecycle status. For example, ACTIVE, DELETED (un-delete possible), DELETE_FINAL (no un-delete),
 * @param data the JsObject containing the trained model
 * @param createdOn date/time this record was created
 * @param modifiedOn date/time this record was last modified
 * @param createdByUserId user who created this row
 * @param modifiedByUserId user who last modified this row
 */

case class ModelEntity(id: Long,
                       name: Option[String],
                       modelType: String,
                       description: Option[String],
                       statusId: Long,
                       data: Option[JsObject] = None,
                       createdOn: DateTime,
                       modifiedOn: DateTime,
                       createdByUserId: Option[Long] = None,
                       modifiedByUserId: Option[Long] = None,
                       lastReadDate: DateTime = new DateTime) extends HasId {
  require(id >= 0, "id must be zero or greater")
  require(name != null, "name must not be null")
  require(name match {
    case Some(n) => n.trim.length > 0
    case _ => true
  },
    "if name is set it must not be empty or whitespace")
  require(modelType != null, "modelType must not be null")
  require(!modelType.isEmpty, "modelType must not be empty")
  //require(modelType.startsWith("model:"), "modelType must start with 'model:'")
  require(description != null, "description must not be null")
  require(data != null, "data must not be null")
  require(createdByUserId != null, "createdByUserId must not be null")
  require(modifiedByUserId != null, "modifiedByUserId must not be null")

  def entityType: String = {
    modelType
  }

  def uri: String = toReference.uri

  def toReference: ModelReference = ModelReference(id)

  def isStatus(s: Status): Boolean = statusId == (s: Long)
}
