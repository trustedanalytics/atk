/**
 *  Copyright (c) 2015 Intel Corporation 
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.trustedanalytics.atk.domain.command

import org.joda.time.format.DateTimeFormat
import spray.json.JsObject
import org.trustedanalytics.atk.domain.{ CommandError, HasId }
import org.joda.time.DateTime
import org.trustedanalytics.atk.engine.ProgressInfo

/**
 * An invocation of a function defined on the server.
 *
 * @param id unique id auto-generated by the database
 * @param name the name of the command to be performed. In the case of a builtin command, this name is used to
 *             find the stored implementation. For a user command, this name is purely for descriptive purposes.
 * @param arguments the arguments to the function. In some cases, such as line parsers, the arguments are configuration
 *                  arguments that configure the parser before any input arrives. In other cases, such as training an
 *                  ML algorithm, the parameters are used to execute the function directly.
 * @param error StackTrace and/or other error text if it exists
 * @param progress List of progress for the jobs initiated by this command
 * @param complete True if this command is completed
 * @param result result data for executing the command
 * @param createdOn date/time this record was created
 * @param modifiedOn date/time this record was last modified
 * @param createdById user who created this row
 */
case class Command(id: Long,
                   name: String,
                   arguments: Option[JsObject] = None,
                   correlationId: String = "",
                   error: Option[CommandError] = None,
                   progress: List[ProgressInfo] = List(),
                   complete: Boolean = false,
                   result: Option[JsObject] = None,
                   createdOn: DateTime,
                   modifiedOn: DateTime,
                   createdById: Option[Long] = None,
                   jobContextId: Option[Long] = None) extends HasId {

  /**
   * Convenience method for getting the args as a String for logging/debugging
   */
  def compactArgs: String = arguments.map { _.compactPrint }.getOrElse("")

}
