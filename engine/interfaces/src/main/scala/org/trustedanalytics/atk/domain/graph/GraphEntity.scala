/*
// Copyright (c) 2015 Intel Corporation 
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

package org.trustedanalytics.atk.domain.graph

import org.trustedanalytics.atk.domain.{ StorageFormats, HasId }
import org.joda.time.DateTime

/**
 * The metadata entry for a graph.
 * @param id unique id auto-generated by the database
 * @param name name assigned by user, auto-assigned by system if user doesn't supply
 * @param description description of the graph (a good default might say what frames it came from)
 * @param storage name used in physical data store, the HBase table name
 * @param statusId lifecycle status. For example, INIT (building), ACTIVE, DELETED (un-delete possible), DELETE_FINAL (no un-delete), INCOMPLETE (failed construction)
 * @param storageFormat e.g. "atk/frame", "cassandra/titan", "hbase/titan"
 * @param createdOn date/time this record was created
 * @param modifiedOn date/time this record was last modified
 * @param createdByUserId user who created this row
 * @param modifiedByUserId  user who last modified this row
 * @param idCounter idCounter counter for generating unique ids for vertices and edges with Seamless Graph.
 */
case class GraphEntity(id: Long,
                       name: Option[String],
                       description: Option[String],
                       storage: String,
                       statusId: Long,
                       storageFormat: String,
                       createdOn: DateTime,
                       modifiedOn: DateTime,
                       createdByUserId: Option[Long] = None,
                       modifiedByUserId: Option[Long] = None,
                       idCounter: Option[Long] = None,
                       lastReadDate: DateTime = new DateTime) extends HasId {
  require(id >= 0, "id must be zero or greater")
  require(name != null, "name must not be null")
  require(name match {
    case Some(n) => n.trim.length > 0
    case _ => true
  }, "if name is set it must not be empty or whitespace")
  // if it is not titan pass this require. if it is titan the name must be defined.
  //require(!isTitan || name.isDefined, "Titan graphs require a name")

  def uri: String = GraphReference(id).uri

  StorageFormats.validateGraphFormat(storageFormat)

  def isSeamless: Boolean = {
    StorageFormats.isSeamlessGraph(storageFormat)
  }

  def isTitan: Boolean = {
    !StorageFormats.isSeamlessGraph(storageFormat)
  }

  def entityType: String = {
    if (isTitan) "graph:titan"
    else if (isSeamless) "graph:"
    else throw new RuntimeException("New graph type is not yet implemented!")
  }

  /**
   * Get the next id from the idCounter
   */
  def nextId(): Long = {
    idCounter.getOrElse(0L) + 1L
  }

  def toReference: GraphReference = {
    GraphReference(id)
  }
}
